"""replace text with adaptive ones

Revision ID: 16c786d490ed
Revises: d7999dfa4aae
Create Date: 2024-12-24 19:34:26.522455

"""

import sqlalchemy as sa
from alembic import op

import models

# revision identifiers, used by Alembic.
revision = "16c786d490ed"
down_revision = "d7999dfa4aae"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("app_model_configs", schema=None) as batch_op:
        batch_op.alter_column(
            "model", existing_type=sa.TEXT(), type_=models.types.AdaptiveText(), existing_nullable=True
        )
        batch_op.alter_column(
            "chat_prompt_config", existing_type=sa.TEXT(), type_=models.types.AdaptiveText(), existing_nullable=True
        )
        batch_op.alter_column(
            "completion_prompt_config",
            existing_type=sa.TEXT(),
            type_=models.types.AdaptiveText(),
            existing_nullable=True,
        )
        batch_op.alter_column(
            "dataset_configs", existing_type=sa.TEXT(), type_=models.types.AdaptiveText(), existing_nullable=True
        )

    with op.batch_alter_table("conversations", schema=None) as batch_op:
        batch_op.alter_column(
            "override_model_configs",
            existing_type=sa.TEXT(),
            type_=models.types.AdaptiveText(),
            existing_nullable=True,
        )

    with op.batch_alter_table("data_source_oauth_bindings", schema=None) as batch_op:
        if batch_op.get_bind().dialect.name == "postgresql":
            batch_op.create_index("source_info_idx", ["source_info"], unique=False, postgresql_using="gin")

    with op.batch_alter_table("dataset_keyword_tables", schema=None) as batch_op:
        batch_op.alter_column(
            "keyword_table", existing_type=sa.TEXT(), type_=models.types.AdaptiveText(), existing_nullable=False
        )

    with op.batch_alter_table("datasets", schema=None) as batch_op:
        batch_op.alter_column(
            "index_struct", existing_type=sa.TEXT(), type_=models.types.AdaptiveText(), existing_nullable=True
        )
        if batch_op.get_bind().dialect.name == "postgresql":
            batch_op.create_index("retrieval_model_idx", ["retrieval_model"], unique=False, postgresql_using="gin")

    with op.batch_alter_table("documents", schema=None) as batch_op:
        batch_op.alter_column(
            "data_source_info", existing_type=sa.TEXT(), type_=models.types.AdaptiveText(), existing_nullable=True
        )

    with op.batch_alter_table("external_knowledge_apis", schema=None) as batch_op:
        batch_op.alter_column(
            "settings", existing_type=sa.TEXT(), type_=models.types.AdaptiveText(), existing_nullable=True
        )

    with op.batch_alter_table("load_balancing_model_configs", schema=None) as batch_op:
        batch_op.alter_column(
            "encrypted_config", existing_type=sa.TEXT(), type_=models.types.AdaptiveText(), existing_nullable=True
        )

    with op.batch_alter_table("messages", schema=None) as batch_op:
        batch_op.alter_column(
            "override_model_configs",
            existing_type=sa.TEXT(),
            type_=models.types.AdaptiveText(),
            existing_nullable=True,
        )

    with op.batch_alter_table("provider_models", schema=None) as batch_op:
        batch_op.alter_column(
            "encrypted_config", existing_type=sa.TEXT(), type_=models.types.AdaptiveText(), existing_nullable=True
        )

    with op.batch_alter_table("providers", schema=None) as batch_op:
        batch_op.alter_column(
            "encrypted_config", existing_type=sa.TEXT(), type_=models.types.AdaptiveText(), existing_nullable=True
        )

    with op.batch_alter_table("tenants", schema=None) as batch_op:
        batch_op.alter_column(
            "custom_config", existing_type=sa.TEXT(), type_=models.types.AdaptiveText(), existing_nullable=True
        )

    with op.batch_alter_table("workflow_conversation_variables", schema=None) as batch_op:
        batch_op.alter_column(
            "data", existing_type=sa.TEXT(), type_=models.types.AdaptiveText(), existing_nullable=False
        )

    with op.batch_alter_table("workflow_node_executions", schema=None) as batch_op:
        batch_op.alter_column(
            "process_data", existing_type=sa.TEXT(), type_=models.types.AdaptiveText(), existing_nullable=True
        )

    with op.batch_alter_table("workflow_runs", schema=None) as batch_op:
        batch_op.alter_column(
            "graph", existing_type=sa.TEXT(), type_=models.types.AdaptiveText(), existing_nullable=True
        )
        batch_op.alter_column(
            "inputs", existing_type=sa.TEXT(), type_=models.types.AdaptiveText(), existing_nullable=True
        )

    with op.batch_alter_table("workflows", schema=None) as batch_op:
        batch_op.alter_column(
            "graph", existing_type=sa.TEXT(), type_=models.types.AdaptiveText(), existing_nullable=False
        )
        batch_op.alter_column(
            "features", existing_type=sa.TEXT(), type_=models.types.AdaptiveText(), existing_nullable=False
        )
        batch_op.alter_column(
            "environment_variables",
            existing_type=sa.TEXT(),
            type_=models.types.AdaptiveText(),
            existing_nullable=False,
        )
        batch_op.alter_column(
            "conversation_variables",
            existing_type=sa.TEXT(),
            type_=models.types.AdaptiveText(),
            existing_nullable=False,
        )

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("workflows", schema=None) as batch_op:
        batch_op.alter_column(
            "conversation_variables",
            existing_type=models.types.AdaptiveText(),
            type_=sa.TEXT(),
            existing_nullable=False,
        )
        batch_op.alter_column(
            "environment_variables",
            existing_type=models.types.AdaptiveText(),
            type_=sa.TEXT(),
            existing_nullable=False,
        )
        batch_op.alter_column(
            "features", existing_type=models.types.AdaptiveText(), type_=sa.TEXT(), existing_nullable=False
        )
        batch_op.alter_column(
            "graph", existing_type=models.types.AdaptiveText(), type_=sa.TEXT(), existing_nullable=False
        )

    with op.batch_alter_table("workflow_runs", schema=None) as batch_op:
        batch_op.alter_column(
            "inputs", existing_type=models.types.AdaptiveText(), type_=sa.TEXT(), existing_nullable=True
        )
        batch_op.alter_column(
            "graph", existing_type=models.types.AdaptiveText(), type_=sa.TEXT(), existing_nullable=True
        )

    with op.batch_alter_table("workflow_node_executions", schema=None) as batch_op:
        batch_op.alter_column(
            "process_data", existing_type=models.types.AdaptiveText(), type_=sa.TEXT(), existing_nullable=True
        )

    with op.batch_alter_table("workflow_conversation_variables", schema=None) as batch_op:
        batch_op.alter_column(
            "data", existing_type=models.types.AdaptiveText(), type_=sa.TEXT(), existing_nullable=False
        )

    with op.batch_alter_table("tenants", schema=None) as batch_op:
        batch_op.alter_column(
            "custom_config", existing_type=models.types.AdaptiveText(), type_=sa.TEXT(), existing_nullable=True
        )

    with op.batch_alter_table("providers", schema=None) as batch_op:
        batch_op.alter_column(
            "encrypted_config", existing_type=models.types.AdaptiveText(), type_=sa.TEXT(), existing_nullable=True
        )

    with op.batch_alter_table("provider_models", schema=None) as batch_op:
        batch_op.alter_column(
            "encrypted_config", existing_type=models.types.AdaptiveText(), type_=sa.TEXT(), existing_nullable=True
        )

    with op.batch_alter_table("messages", schema=None) as batch_op:
        batch_op.alter_column(
            "override_model_configs",
            existing_type=models.types.AdaptiveText(),
            type_=sa.TEXT(),
            existing_nullable=True,
        )

    with op.batch_alter_table("load_balancing_model_configs", schema=None) as batch_op:
        batch_op.alter_column(
            "encrypted_config", existing_type=models.types.AdaptiveText(), type_=sa.TEXT(), existing_nullable=True
        )

    with op.batch_alter_table("external_knowledge_apis", schema=None) as batch_op:
        batch_op.alter_column(
            "settings", existing_type=models.types.AdaptiveText(), type_=sa.TEXT(), existing_nullable=True
        )

    with op.batch_alter_table("documents", schema=None) as batch_op:
        batch_op.alter_column(
            "data_source_info", existing_type=models.types.AdaptiveText(), type_=sa.TEXT(), existing_nullable=True
        )

    with op.batch_alter_table("datasets", schema=None) as batch_op:
        if batch_op.get_bind().dialect.name == "postgresql":
            batch_op.drop_index("retrieval_model_idx", postgresql_using="gin")
        batch_op.alter_column(
            "index_struct", existing_type=models.types.AdaptiveText(), type_=sa.TEXT(), existing_nullable=True
        )

    with op.batch_alter_table("dataset_keyword_tables", schema=None) as batch_op:
        batch_op.alter_column(
            "keyword_table", existing_type=models.types.AdaptiveText(), type_=sa.TEXT(), existing_nullable=False
        )

    with op.batch_alter_table("data_source_oauth_bindings", schema=None) as batch_op:
        if batch_op.get_bind().dialect.name == "postgresql":
            batch_op.drop_index("source_info_idx", postgresql_using="gin")

    with op.batch_alter_table("conversations", schema=None) as batch_op:
        batch_op.alter_column(
            "override_model_configs",
            existing_type=models.types.AdaptiveText(),
            type_=sa.TEXT(),
            existing_nullable=True,
        )

    with op.batch_alter_table("app_model_configs", schema=None) as batch_op:
        batch_op.alter_column(
            "dataset_configs", existing_type=models.types.AdaptiveText(), type_=sa.TEXT(), existing_nullable=True
        )
        batch_op.alter_column(
            "completion_prompt_config",
            existing_type=models.types.AdaptiveText(),
            type_=sa.TEXT(),
            existing_nullable=True,
        )
        batch_op.alter_column(
            "chat_prompt_config", existing_type=models.types.AdaptiveText(), type_=sa.TEXT(), existing_nullable=True
        )
        batch_op.alter_column(
            "model", existing_type=models.types.AdaptiveText(), type_=sa.TEXT(), existing_nullable=True
        )

    # ### end Alembic commands ###
